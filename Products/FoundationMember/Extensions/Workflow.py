#
# Generated by dumpDCWorkflow.py written by Sebastien Bigaret
# Original workflow id/title: foundation_member_workflow/Default Workflow [Plone]
# Date: 2004/09/02 04:01:51.049 GMT-4
#
# WARNING: this dumps does NOT contain any scripts you might have added to
# the workflow, IT IS YOUR RESPONSABILITY TO MAKE BACKUPS FOR THESE SCRIPTS.
#
# No script detected in this workflow
# 
"""
Programmatically creates a workflow type
"""
__version__ = "$Revision: 1.1.1.1 $"[11:-2]

from Products.CMFCore.WorkflowTool import addWorkflowFactory

from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition

def setupFoundation_member_workflow(wf):
    "..."
    wf.setProperties(title='Approval process for foundation members')

    for s in ['initial', 'approved', 'pending', 'emeritus']:
        wf.states.addState(s)
    for t in ['retract', 'approve', 'submit', 'resign', 'reject', 'renew', 'retire']:
        wf.transitions.addTransition(t)
    for v in ['action', 'review_history', 'actor', 'comments', 'time']:
        wf.variables.addVariable(v)
    for l in ['reviewer_queue']:
        wf.worklists.addWorklist(l)
    for p in ('Access contents information', 'Modify portal content', 'View', 'Change portal events'):
        wf.addManagedPermission(p)
        

    ## Initial State
    wf.states.setInitialState('initial')

    ## States initialization
    sdef = wf.states['initial']
    sdef.setProperties(title="""Non-member""",
                       transitions=('approve', 'submit'))
    sdef.setPermission('Access contents information', 0, ['Manager', 'Owner'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner'])
    sdef.setPermission('View', 0, ['Manager', 'Owner'])
    sdef.setPermission('Change portal events', 0, ['Manager', 'Owner'])

    sdef = wf.states['approved']
    sdef.setProperties(title="""Approved member""",
                       transitions=('reject', 'resign', 'renew', 'retire'))
    sdef.setPermission('Access contents information', 1, ['Anonymous', 'Manager', 'Owner'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner'])
    sdef.setPermission('View', 1, ['Anonymous', 'Manager', 'Owner'])
    sdef.setPermission('Change portal events', 0, ['Manager', 'Owner'])

    sdef = wf.states['pending']
    sdef.setProperties(title="""Waiting for reviewer""",
                       transitions=('approve', 'reject', 'retract'))
    sdef.setPermission('Access contents information', 0, ['Manager', 'Owner', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner'])
    sdef.setPermission('View', 0, ['Manager', 'Owner', 'Reviewer'])
    sdef.setPermission('Change portal events', 0, ['Manager', 'Owner'])

    sdef = wf.states['emeritus']
    sdef.setProperties(title="""Emeritus member""",
                       transitions=('submit', 'reject', 'retract'))
    sdef.setPermission('Access contents information', 0, ['Manager', 'Owner', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner'])
    sdef.setPermission('View', 0, ['Manager', 'Owner', 'Reviewer'])
    sdef.setPermission('Change portal events', 0, ['Manager', 'Owner'])

    ## Transitions initialization
    tdef = wf.transitions['retract']
    tdef.setProperties(title="""Member retracts submission""",
                       new_state_id="""initial""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Retract""",
                       actbox_url="""%(content_url)s/content_retract_form""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Request review'},
                       )

    tdef = wf.transitions['approve']
    tdef.setProperties(title="""Member is approved""",
                       new_state_id="""approved""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Approve""",
                       actbox_url="""%(content_url)s/content_publish_form""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Foundation Member: Manage Members'},
                       )

    tdef = wf.transitions['submit']
    tdef.setProperties(title="""Member requests publishing""",
                       new_state_id="""pending""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Submit""",
                       actbox_url="""%(content_url)s/content_submit_form""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Request review'},
                       )

    tdef = wf.transitions['resign']
    tdef.setProperties(title="""Resign""",
                       new_state_id="""initial""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Resign""",
                       actbox_url="""http://""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'Owner'},
                       )

    tdef = wf.transitions['reject']
    tdef.setProperties(title="""Reviewer rejects submission""",
                       new_state_id="""initial""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Reject""",
                       actbox_url="""%(content_url)s/content_reject_form""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Foundation Member: Manage Members'},
                       )

    tdef = wf.transitions['renew']
    tdef.setProperties(title="""Member renews membership""",
                       new_state_id="""approved""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Renew""",
                       actbox_url="""%(content_url)s/view""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Modify portal content'},
                       )

    tdef = wf.transitions['retire']
    tdef.setProperties(title="""Retire member""",
                       new_state_id="""emeritus""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Retire""",
                       actbox_url="""%(content_url)s/view""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Foundation Member: Manage Members'},
                       )

    ## State Variable
    wf.variables.setStateVar('review_state')

    ## Variables initialization
    vdef = wf.variables['action']
    vdef.setProperties(description="""The last transition""",
                       default_value="""""",
                       default_expr="""transition/getId|nothing""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['review_history']
    vdef.setProperties(description="""Provides access to workflow history""",
                       default_value="""""",
                       default_expr="""state_change/getHistory""",
                       for_catalog=0,
                       for_status=0,
                       update_always=0,
                       props={'guard_permissions': 'Request review; Review portal content'})

    vdef = wf.variables['actor']
    vdef.setProperties(description="""The ID of the user who performed the last transition""",
                       default_value="""""",
                       default_expr="""user/getId""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['comments']
    vdef.setProperties(description="""Comments about the last transition""",
                       default_value="""""",
                       default_expr="""python:state_change.kwargs.get('comment', '')""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['time']
    vdef.setProperties(description="""Time of the last transition""",
                       default_value="""""",
                       default_expr="""state_change/getDateTime""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    ## Worklists Initialization
    ldef = wf.worklists['reviewer_queue']
    ldef.setProperties(description="""Reviewer tasks""",
                       actbox_name="""Pending (%(count)d)""",
                       actbox_url="""%(portal_url)s/search?review_state=pending""",
                       actbox_category="""global""",
                       props={'var_match_review_state': 'pending', 'guard_roles': 'PFMembershipCommittee'})


def createFoundation_member_workflow(id):
    "..."
    ob = DCWorkflowDefinition(id)
    setupFoundation_member_workflow(ob)
    return ob

def install():
    addWorkflowFactory(createFoundation_member_workflow,
                   id='foundation_member_workflow',
                   title='Approval process for foundation members')

